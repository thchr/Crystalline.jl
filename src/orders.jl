# ---------------------------------------------------------------------------------------- #
# POINT GROUPS

const PG_ORDERs = ImmutableDict( # PG_ORDERs[iuc] == order(pointgroup(iuc, D)) (for all D)
    "1"     =>  1,  "-1"   =>  2,
    "2"     =>  2,  "m"    =>  2,  "2/m"  => 4,  # unique axes b setting
    "222"   =>  4,  "mm2"  =>  4,  "mmm"  => 8,  "4"    => 4,
    "-4"    =>  4,  "4/m"  =>  8,  "422"  => 8,  "4mm"  => 8,
    "-42m"  =>  8,  "-4m2" =>  8,  # D₂d setting variations
    "4/mmm" => 16,  "3"    =>  3,  "-3"   => 6,
    "312"   =>  6,  "321"  =>  6,  # D₃ setting variations  (hexagonal axes)
    "3m1"   =>  6,  "31m"  =>  6,  # C₃ᵥ setting variations (hexagonal axes)
    "-31m"  => 12,  "-3m1" => 12,  # D₃d setting variations (hexagonal axes)
    "6"     =>  6,  "-6"   =>  6,  "6/m"  => 12,  "622"  => 12,
    "6mm"   => 12,
    "-62m"  => 12,  "-6m2" => 12,  # D₃ₕ setting variations
    "6/mmm" => 24,  "23"   => 12,
    "m-3"   => 24,  "432"  => 24,  "-43m" => 24,  "m-3m" => 48
)

# ---------------------------------------------------------------------------------------- #
# SPACE GROUPS

const SG_ORDERs = ( # SG_ORDERs[D][n] == order(spacegroup(n, D))
    # ----- D=1 -----
    [ 1,   2],
    # ----- D=2 -----
    [ 1,   2,   2,   2,   4,   4,   4,   4,   8,   4,   8,   8,   3,   6,   6,   6,  12],
    # ----- D=3 -----
    [ 1,   2,   2,   2,   4,   2,   2,   4,   4,   4,   4,   8,   4,   4,   8,   4,   4,
      4,   4,   8,   8,  16,   8,   8,   4,   4,   4,   4,   4,   4,   4,   4,   4,   4,
      8,   8,   8,   8,   8,   8,   8,  16,  16,   8,   8,   8,   8,   8,   8,   8,   8,
      8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,  16,  16,  16,  16,  16,  16,
     32,  32,  16,  16,  16,  16,   4,   4,   4,   4,   8,   8,   4,   8,   8,   8,   8,
      8,  16,  16,   8,   8,   8,   8,   8,   8,   8,   8,  16,  16,   8,   8,   8,   8,
      8,   8,   8,   8,  16,  16,  16,  16,   8,   8,   8,   8,   8,   8,   8,   8,  16,
     16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,
     16,  16,  32,  32,  32,  32,   3,   3,   3,   9,   6,  18,   6,   6,   6,   6,   6,
      6,  18,   6,   6,   6,   6,  18,  18,  12,  12,  12,  12,  36,  36,   6,   6,   6,
      6,   6,   6,   6,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,
     12,  12,  12,  24,  24,  24,  24,  12,  48,  24,  12,  24,  24,  24,  96,  96,  48,
     24,  48,  24,  24,  96,  96,  48,  24,  24,  48,  24,  96,  48,  24,  96,  48,  48,
     48,  48,  48, 192, 192, 192, 192,  96,  96]    
)

const SG_PRIMITIVE_ORDERs = ( # SG_ORDERs[D][n] == order(primitivize(spacegroup(n, D)))
    # ----- D=1 -----
    SG_ORDERs[1], # no centered lattices
    # ----- D=2 -----
    [ 1,  2,  2,  2,  2,  4,  4,  4,  4,  4,  8,  8,  3,  6,  6,  6, 12],
    # ----- D=3 -----
    [ 1,  2,  2,  2,  2,  2,  2,  2,  2,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,
      4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,
      4,  4,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,
      8,  8,  8,  8,  8,  8,  8,  8,  4,  4,  4,  4,  4,  4,  4,  4,  8,  8,  8,  8,  8,  8,
      8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,
      8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
     16, 16, 16, 16, 16, 16, 16, 16, 16, 16,  3,  3,  3,  3,  6,  6,  6,  6,  6,  6,  6,  6,
      6,  6,  6,  6,  6,  6,  6, 12, 12, 12, 12, 12, 12,  6,  6,  6,  6,  6,  6,  6, 12, 12,
     12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 24, 24, 24, 24, 12, 12, 12, 12,
     12, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
     48, 48, 48, 48, 48, 48, 48, 48, 48, 48]
)

# ---------------------------------------------------------------------------------------- #
# SUBPERIODIC GROUPS

subg_index(D,P) = fld(D*P+1,2) # hashmap of (D,P) → idx: (2,1) → 1, (3,1) → 2, (3,2) → 3

const SUBG_ORDERs = (# SUBG_ORDERs[subg_index(D,P)][n] == order(subperiodicgroup(n, D, P))
    # ----- D=2, P=1 (frieze groups) -----
    [ 1,  2,  2,  2,  2,  4,  4],
    # ----- D=3, P=1 (rod groups) -----
    [ 1,  2,  2,  2,  2,  4,  4,  2,  2,  2,  4,  4,  4,  4,  4,  4,  4,  4,  4,  8,  8,  8,
      4,  4,  4,  4,  4,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8, 16, 16, 16,  3,  3,  3,
      6,  6,  6,  6,  6,  6, 12, 12,  6,  6,  6,  6,  6,  6,  6, 12, 12, 12, 12, 12, 12, 12,
     12, 12, 12, 12, 12, 12, 24, 24, 24],
    # ----- D=3, P=2 (layer groups) -----
    [ 1,  2,  2,  2,  2,  4,  4,  2,  2,  4,  2,  2,  4,  4,  4,  4,  4,  8,  4,  4,  4,  8,
      4,  4,  4,  8,  4,  4,  4,  4,  4,  4,  4,  4,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,
      8,  8, 16, 16,  4,  4,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8, 16, 16, 16, 16,  3,  6,
      6,  6,  6,  6, 12, 12,  6,  6, 12, 12, 12, 12, 12, 24]
)

const SUBG_PRIMITIVE_ORDERs = (
    # SUBG_PRIMITIVE_ORDERs[subg_index(D,P)][n] == order(primitivize(subperiodicgroup(n,D,P)))
    # ----- D=2, P=1 -----
    SUBG_ORDERs[subg_index(2,1)], # no centered lattices
    # ----- D=3, P=1 -----
    SUBG_ORDERs[subg_index(3,1)], # no centered lattices
    [# ----- D=3, P=2 -----
     1,  2,  2,  2,  2,  4,  4,  2,  2,  2,  2,  2,  2,  4,  4,  4,  4,  4,  4,  4,  4,  4,
     4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  8,  8,  8,  8,  8,  8,  8,  8,
     8,  8,  8,  8,  4,  4,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8, 16, 16, 16, 16,  3,  6,
     6,  6,  6,  6, 12, 12,  6,  6, 12, 12, 12, 12, 12, 24],
)
