get_indexed_rotation(n::Integer, Dᵛ::Val{3}) = ROTATIONS_3D[n]
get_indexed_rotation(n::Integer, Dᵛ::Val{2}) = ROTATIONS_2D[n]
get_indexed_rotation(n::Integer, Dᵛ::Val{1}) = ROTATIONS_1D[n]

get_indexed_translation(n::Integer, Dᵛ::Val{3}) = TRANSLATIONS_3D[n]
get_indexed_translation(n::Integer, Dᵛ::Val{2}) = TRANSLATIONS_2D[n]
get_indexed_translation(n::Integer, Dᵛ::Val{1}) = TRANSLATIONS_1D[n]

const ROTATIONS_3D = [
    # needed for Litvin magnetic space group data, ISOTROPY space group data, and point
    # group data
    SqSMatrix{3,Float64}([1 0 0 ; 0 1 0 ; 0 0 1 ]),
    SqSMatrix{3,Float64}([-1 0 0; 0 -1 0; 0 0 -1]),
    SqSMatrix{3,Float64}([-1 0 0; 0 1 0 ; 0 0 -1]),
    SqSMatrix{3,Float64}([1 0 0 ; 0 -1 0; 0 0 1 ]),
    SqSMatrix{3,Float64}([1 0 0 ; 0 -1 0; 0 0 -1]),
    SqSMatrix{3,Float64}([-1 0 0; 0 -1 0; 0 0 1 ]),
    SqSMatrix{3,Float64}([-1 0 0; 0 1 0 ; 0 0 1 ]),
    SqSMatrix{3,Float64}([1 0 0 ; 0 1 0 ; 0 0 -1]),
    SqSMatrix{3,Float64}([0 -1 0; 1 0 0 ; 0 0 1 ]),
    SqSMatrix{3,Float64}([0 1 0 ; -1 0 0; 0 0 1 ]),
    SqSMatrix{3,Float64}([0 1 0 ; -1 0 0; 0 0 -1]),
    SqSMatrix{3,Float64}([0 -1 0; 1 0 0 ; 0 0 -1]),
    SqSMatrix{3,Float64}([0 1 0 ; 1 0 0 ; 0 0 -1]),
    SqSMatrix{3,Float64}([0 -1 0; -1 0 0; 0 0 -1]),
    SqSMatrix{3,Float64}([0 -1 0; -1 0 0; 0 0 1 ]),
    SqSMatrix{3,Float64}([0 1 0 ; 1 0 0 ; 0 0 1 ]),
    SqSMatrix{3,Float64}([0 -1 0; 1 -1 0; 0 0 1 ]),
    SqSMatrix{3,Float64}([-1 1 0; -1 0 0; 0 0 1 ]),
    SqSMatrix{3,Float64}([0 1 0 ; -1 1 0; 0 0 -1]),
    SqSMatrix{3,Float64}([1 -1 0; 1 0 0 ; 0 0 -1]),
    SqSMatrix{3,Float64}([1 0 0 ; 1 -1 0; 0 0 -1]),
    SqSMatrix{3,Float64}([-1 1 0; 0 1 0 ; 0 0 -1]),
    SqSMatrix{3,Float64}([1 -1 0; 0 -1 0; 0 0 -1]),
    SqSMatrix{3,Float64}([-1 0 0; -1 1 0; 0 0 -1]),
    SqSMatrix{3,Float64}([-1 1 0; 0 1 0 ; 0 0 1 ]),
    SqSMatrix{3,Float64}([1 0 0 ; 1 -1 0; 0 0 1 ]),
    SqSMatrix{3,Float64}([-1 0 0; -1 1 0; 0 0 1 ]),
    SqSMatrix{3,Float64}([1 -1 0; 0 -1 0; 0 0 1 ]),
    SqSMatrix{3,Float64}([1 -1 0; 1 0 0 ; 0 0 1 ]),
    SqSMatrix{3,Float64}([0 1 0 ; -1 1 0; 0 0 1 ]),
    SqSMatrix{3,Float64}([-1 1 0; -1 0 0; 0 0 -1]),
    SqSMatrix{3,Float64}([0 -1 0; 1 -1 0; 0 0 -1]),
    SqSMatrix{3,Float64}([0 0 1 ; 1 0 0 ; 0 1 0 ]),
    SqSMatrix{3,Float64}([0 1 0 ; 0 0 1 ; 1 0 0 ]),
    SqSMatrix{3,Float64}([0 -1 0; 0 0 1 ; -1 0 0]),
    SqSMatrix{3,Float64}([0 0 -1; -1 0 0; 0 1 0 ]),
    SqSMatrix{3,Float64}([0 -1 0; 0 0 -1; 1 0 0 ]),
    SqSMatrix{3,Float64}([0 0 1 ; -1 0 0; 0 -1 0]),
    SqSMatrix{3,Float64}([0 1 0 ; 0 0 -1; -1 0 0]),
    SqSMatrix{3,Float64}([0 0 -1; 1 0 0 ; 0 -1 0]),
    SqSMatrix{3,Float64}([0 0 -1; -1 0 0; 0 -1 0]),
    SqSMatrix{3,Float64}([0 -1 0; 0 0 -1; -1 0 0]),
    SqSMatrix{3,Float64}([0 1 0 ; 0 0 -1; 1 0 0 ]),
    SqSMatrix{3,Float64}([0 0 1 ; 1 0 0 ; 0 -1 0]),
    SqSMatrix{3,Float64}([0 1 0 ; 0 0 1 ; -1 0 0]),
    SqSMatrix{3,Float64}([0 0 -1; 1 0 0 ; 0 1 0 ]),
    SqSMatrix{3,Float64}([0 -1 0; 0 0 1 ; 1 0 0 ]),
    SqSMatrix{3,Float64}([0 0 1 ; -1 0 0; 0 1 0 ]),
    SqSMatrix{3,Float64}([1 0 0 ; 0 0 -1; 0 1 0 ]),
    SqSMatrix{3,Float64}([1 0 0 ; 0 0 1 ; 0 -1 0]),
    SqSMatrix{3,Float64}([0 0 1 ; 0 1 0 ; -1 0 0]),
    SqSMatrix{3,Float64}([0 0 -1; 0 1 0 ; 1 0 0 ]),
    SqSMatrix{3,Float64}([-1 0 0; 0 0 1 ; 0 1 0 ]),
    SqSMatrix{3,Float64}([-1 0 0; 0 0 -1; 0 -1 0]),
    SqSMatrix{3,Float64}([0 0 1 ; 0 -1 0; 1 0 0 ]),
    SqSMatrix{3,Float64}([0 0 -1; 0 -1 0; -1 0 0]),
    SqSMatrix{3,Float64}([-1 0 0; 0 0 1 ; 0 -1 0]),
    SqSMatrix{3,Float64}([-1 0 0; 0 0 -1; 0 1 0 ]),
    SqSMatrix{3,Float64}([0 0 -1; 0 -1 0; 1 0 0 ]),
    SqSMatrix{3,Float64}([0 0 1 ; 0 -1 0; -1 0 0]),
    SqSMatrix{3,Float64}([1 0 0 ; 0 0 -1; 0 -1 0]),
    SqSMatrix{3,Float64}([1 0 0 ; 0 0 1 ; 0 1 0 ]),
    SqSMatrix{3,Float64}([0 0 -1; 0 1 0 ; -1 0 0]),
    SqSMatrix{3,Float64}([0 0 1 ; 0 1 0 ; 1 0 0 ]),
]

const TRANSLATIONS_3D = [
    # needed for Litvin magnetic space group data
    SVector{3,Float64}(0, 0, 0),
    SVector{3,Float64}(0, 0, 0.5),
    SVector{3,Float64}(0.5, 0, 0),
    SVector{3,Float64}(0, 0.5, 0),
    SVector{3,Float64}(0.5, 0.5, 0),
    SVector{3,Float64}(0.5, 0, 0.5),
    SVector{3,Float64}(0, 0.5, 0.5),
    SVector{3,Float64}(0.5, 0.5, 0.5),
    SVector{3,Float64}(0.25, 0.25, 0.25),
    SVector{3,Float64}(0.75, 0.75, 0.75),
    SVector{3,Float64}(0, 0.75, 0.75),
    SVector{3,Float64}(0.75, 0, 0.75),
    SVector{3,Float64}(0.75, 0.75, 0),
    SVector{3,Float64}(0, 0.25, 0.25),
    SVector{3,Float64}(0.25, 0, 0.25),
    SVector{3,Float64}(0.25, 0.25, 0),
    SVector{3,Float64}(0.5, 0.25, 0.25),
    SVector{3,Float64}(0.25, 0.5, 0.25),
    SVector{3,Float64}(0.25, 0.25, 0.5),
    SVector{3,Float64}(0.5, 0.75, 0.75),
    SVector{3,Float64}(0.75, 0.5, 0.75),
    SVector{3,Float64}(0.75, 0.75, 0.5),
    SVector{3,Float64}(0, 0, 0.25),
    SVector{3,Float64}(0, 0, 0.75),
    SVector{3,Float64}(0.5, 0.5, 0.25),
    SVector{3,Float64}(0.5, 0.5, 0.75),
    SVector{3,Float64}(0, 0.5, 0.25),
    SVector{3,Float64}(0.5, 0, 0.25),
    SVector{3,Float64}(0.75, 0.25, 0.25),
    SVector{3,Float64}(0.25, 0.75, 0.75),
    SVector{3,Float64}(0.25, 0.75, 0.25),
    SVector{3,Float64}(0.75, 0.75, 0.25),
    SVector{3,Float64}(0.75, 0.25, 0.75),
    SVector{3,Float64}(0.25, 0.25, 0.75),
    SVector{3,Float64}(0, 0, 1/3),
    SVector{3,Float64}(0, 0, 2/3),
    SVector{3,Float64}(0, 0, 5/6),
    SVector{3,Float64}(0, 0, 1/6),
    # extra entries for ISOTROPY space group data
    SVector{3,Float64}(0.5, 0, 0.75), 
    SVector{3,Float64}(0, 0.5, 0.75), 
    SVector{3,Float64}(0.75, 0.25, 0.5), 
    SVector{3,Float64}(0.25, 0.5, 0.75), 
    SVector{3,Float64}(0.5, 0.75, 0.25), 
    SVector{3,Float64}(0.25, 0.75, 0.5), 
    SVector{3,Float64}(0.75, 0.5, 0.25), 
    SVector{3,Float64}(0.5, 0.25, 0.75), 
    SVector{3,Float64}(0.75, 0.25, 0), 
    SVector{3,Float64}(0.25, 0, 0.75), 
    SVector{3,Float64}(0, 0.75, 0.25), 
    SVector{3,Float64}(0.25, 0.75, 0), 
    SVector{3,Float64}(0.75, 0, 0.25), 
    SVector{3,Float64}(0, 0.25, 0.75),
]

const ROTATIONS_2D = [
    SqSMatrix{2,Float64}([1 0 ; 0 1]),
    SqSMatrix{2,Float64}([-1 0; 0 -1]),
    SqSMatrix{2,Float64}([-1 0; 0 1]),
    SqSMatrix{2,Float64}([1 0 ; 0 -1]),
    SqSMatrix{2,Float64}([0 -1; 1 0]),
    SqSMatrix{2,Float64}([0 1 ; -1 0]),
    SqSMatrix{2,Float64}([0 1 ; 1 0]),
    SqSMatrix{2,Float64}([0 -1; -1 0]),
    SqSMatrix{2,Float64}([0 -1; 1 -1]),
    SqSMatrix{2,Float64}([-1 1; -1 0]),
    SqSMatrix{2,Float64}([-1 1; 0 1]),
    SqSMatrix{2,Float64}([1 0 ; 1 -1]),
    SqSMatrix{2,Float64}([1 -1; 0 -1]),
    SqSMatrix{2,Float64}([-1 0; -1 1]),
    SqSMatrix{2,Float64}([0 1 ; -1 1]),
    SqSMatrix{2,Float64}([1 -1; 1 0]),
]

const TRANSLATIONS_2D = [
    SVector{2,Float64}(0, 0),
    SVector{2,Float64}(0, 0.5),
    SVector{2,Float64}(0.5, 0.5),
    SVector{2,Float64}(0.5, 0),
]

const ROTATIONS_1D = [
    SqSMatrix{1,Float64}([1;;]),
    SqSMatrix{1,Float64}([-1;;]),
]

const TRANSLATIONS_1D = [
    SVector{1,Float64}(0),
]